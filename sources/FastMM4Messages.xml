<?xml version="1.0" encoding="utf-8"?>
<namespace name="FastMM4Messages">
  <const name="FullDebugModeLibraryName" type="string">
    <devnotes>
      un
    </devnotes>
    <value>
      FastMM_FullDebugMode.dll
    </value>
  </const>
  <const name="LogFileExtension" type="string">
    <value>
      _MemoryManager_EventLog.txt
    </value>
  </const>
  <const name="CRLF" type="string">
    <value>
      


    </value>
  </const>
  <const name="EventSeparator" type="string">
    <value>
      --------------------------------
    </value>
  </const>
  <const name="UnknownClassNameMsg" type="string">
    <value>
      Unknown
    </value>
  </const>
  <const name="CurrentStackTraceMsg" type="string">
    <value>
      



The current stack trace leading to this error (return addresses): 
    </value>
  </const>
  <const name="MemoryDumpMsg" type="string">
    <value>
      



Current memory dump of 256 bytes starting at pointer address 
    </value>
  </const>
  <const name="BlockScanLogHeader" type="string">
    <value>
      Allocated block logged by LogAllocatedBlocksToFile. The size is: 
    </value>
  </const>
  <const name="ErrorMsgHeader" type="string">
    <value>
      FastMM has detected an error during a 
    </value>
  </const>
  <const name="GetMemMsg" type="string">
    <value>
      GetMem
    </value>
  </const>
  <const name="FreeMemMsg" type="string">
    <value>
      FreeMem
    </value>
  </const>
  <const name="ReallocMemMsg" type="string">
    <value>
      ReallocMem
    </value>
  </const>
  <const name="BlockCheckMsg" type="string">
    <value>
      free block scan
    </value>
  </const>
  <const name="OperationMsg" type="string">
    <value>
       operation. 
    </value>
  </const>
  <const name="BlockHeaderCorruptedMsg" type="string">
    <value>
      The block header has been corrupted. 
    </value>
  </const>
  <const name="BlockFooterCorruptedMsg" type="string">
    <value>
      The block footer has been corrupted. 
    </value>
  </const>
  <const name="FreeModifiedErrorMsg" type="string">
    <value>
      FastMM detected that a block has been modified after being freed. 
    </value>
  </const>
  <const name="DoubleFreeErrorMsg" type="string">
    <value>
      An attempt has been made to free/reallocate an unallocated block.
    </value>
  </const>
  <const name="PreviousBlockSizeMsg" type="string">
    <value>
      



The previous block size was: 
    </value>
  </const>
  <const name="CurrentBlockSizeMsg" type="string">
    <value>
      



The block size is: 
    </value>
  </const>
  <const name="StackTraceAtPrevAllocMsg" type="string">
    <value>
      



Stack trace of when this block was previously allocated (return addresses):
    </value>
  </const>
  <const name="StackTraceAtAllocMsg" type="string">
    <value>
      



Stack trace of when this block was allocated (return addresses):
    </value>
  </const>
  <const name="PreviousObjectClassMsg" type="string">
    <value>
      



The block was previously used for an object of class: 
    </value>
  </const>
  <const name="CurrentObjectClassMsg" type="string">
    <value>
      



The block is currently used for an object of class: 
    </value>
  </const>
  <const name="PreviousAllocationGroupMsg" type="string">
    <value>
      



The allocation group was: 
    </value>
  </const>
  <const name="PreviousAllocationNumberMsg" type="string">
    <value>
      



The allocation number was: 
    </value>
  </const>
  <const name="CurrentAllocationGroupMsg" type="string">
    <value>
      



The allocation group is: 
    </value>
  </const>
  <const name="CurrentAllocationNumberMsg" type="string">
    <value>
      



The allocation number is: 
    </value>
  </const>
  <const name="StackTraceAtFreeMsg" type="string">
    <value>
      



Stack trace of when the block was previously freed (return addresses):
    </value>
  </const>
  <const name="BlockErrorMsgTitle" type="string">
    <value>
      Memory Error Detected
    </value>
  </const>
  <const name="VirtualMethodErrorHeader" type="string">
    <value>
      FastMM has detected an attempt to call a virtual method on a freed object. An access violation will now be raised in order to abort the current operation.
    </value>
  </const>
  <const name="InterfaceErrorHeader" type="string">
    <value>
      FastMM has detected an attempt to use an interface of a freed object. An access violation will now be raised in order to abort the current operation.
    </value>
  </const>
  <const name="BlockHeaderCorruptedNoHistoryMsg" type="string">
    <value>
       Unfortunately the block header has been corrupted so no history is available.
    </value>
  </const>
  <const name="FreedObjectClassMsg" type="string">
    <value>
      



Freed object class: 
    </value>
  </const>
  <const name="VirtualMethodName" type="string">
    <value>
      



Virtual method: 
    </value>
  </const>
  <const name="VirtualMethodOffset" type="string">
    <value>
      Offset +
    </value>
  </const>
  <const name="VirtualMethodAddress" type="string">
    <value>
      



Virtual method address: 
    </value>
  </const>
  <const name="StackTraceAtObjectAllocMsg" type="string">
    <value>
      



Stack trace of when the object was allocated (return addresses):
    </value>
  </const>
  <const name="StackTraceAtObjectFreeMsg" type="string">
    <value>
      



Stack trace of when the object was subsequently freed (return addresses):
    </value>
  </const>
  <const name="AlreadyInstalledMsg" type="string">
    <value>
      FastMM4 is already installed.
    </value>
  </const>
  <const name="AlreadyInstalledTitle" type="string">
    <value>
      Already installed.
    </value>
  </const>
  <const name="OtherMMInstalledMsg" type="string">
    <value>
      FastMM4 cannot be installed since another third party memory manager has already installed itself.

If you want to use FastMM4, please make sure that FastMM4.pas is the very first unit in the &quot;uses&quot;

section of your project's .dpr file.
    </value>
  </const>
  <const name="OtherMMInstalledTitle" type="string">
    <value>
      Cannot install FastMM4 - Another memory manager is already installed
    </value>
  </const>
  <const name="MemoryAllocatedMsg" type="string">
    <value>
      FastMM4 cannot install since memory has already been allocated through the default memory manager.

FastMM4.pas MUST be the first unit in your project's .dpr file, otherwise memory may be allocated

through the default memory manager before FastMM4 gains control. 



If you are using an exception trapper like MadExcept (or any tool that modifies the unit initialization order),

go into its configuration page and ensure that the FastMM4.pas unit is initialized before any other unit.
    </value>
  </const>
  <const name="MemoryAllocatedTitle" type="string">
    <value>
      Cannot install FastMM4 - Memory has already been allocated
    </value>
  </const>
  <const name="LeakLogHeader" type="string">
    <value>
      A memory block has been leaked. The size is: 
    </value>
  </const>
  <const name="LeakMessageHeader" type="string">
    <value>
      This application has leaked memory. 
    </value>
  </const>
  <const name="SmallLeakDetail" type="string">
    <value>
      The small block leaks are (excluding expected leaks registered by pointer):


    </value>
  </const>
  <const name="LargeLeakDetail" type="string">
    <value>
      The sizes of leaked medium and large blocks are (excluding expected leaks registered by pointer): 
    </value>
  </const>
  <const name="BytesMessage" type="string">
    <value>
       bytes: 
    </value>
  </const>
  <const name="StringBlockMessage" type="string">
    <value>
      String
    </value>
  </const>
  <const name="LeakMessageFooter" type="string">
    <value>
      



Note: Memory leak detail is logged to a text file in the same folder as this application. To disable this memory leak check, undefine &quot;EnableMemoryLeakReporting&quot;.


    </value>
  </const>
  <const name="LeakMessageTitle" type="string">
    <value>
      Memory Leak Detected
    </value>
  </const>
  <const name="InvalidOperationTitle" type="string">
    <value>
      MM Operation after uninstall.
    </value>
  </const>
  <const name="InvalidGetMemMsg" type="string">
    <value>
      FastMM has detected a GetMem call after FastMM was uninstalled.
    </value>
  </const>
  <const name="InvalidFreeMemMsg" type="string">
    <value>
      FastMM has detected a FreeMem call after FastMM was uninstalled.
    </value>
  </const>
  <const name="InvalidReallocMemMsg" type="string">
    <value>
      FastMM has detected a ReallocMem call after FastMM was uninstalled.
    </value>
  </const>
  <const name="InvalidAllocMemMsg" type="string">
    <value>
      FastMM has detected an AllocMem call after FastMM was uninstalled.
    </value>
  </const>
</namespace>
